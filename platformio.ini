; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
;default_envs = rpipico
;default_envs = rpipicow
default_envs = ESP32_S3_WROOM1_DevKitC_1_N16R8
;default_envs = ESP32


; PROGRAMMA PER CHIAVETTA RICEVENTE
; con ESP-NOW (solo per ESP32)
; con Bluetooth (CLASSICO o BLE)
; con wifi normale ??
; connessione mediante modulo nRF__1__ connesso al micro tramite spi
; connessione mediante modulo nRF__2__ connesso al micro tramite spi


; PROGRAMMA PER PISTOLA
; metodo collegamento  con chiavetta ricvevente
; con ESP-NOW (solo per ESP32)
; con Bluetooth (CLASSICO o BLE)
; con wifi normale ??
; connessione mediante modulo nRF__1__ connesso al micro tramite spi
; connessione mediante modulo nRF__2__ connesso al micro tramite spi

; metodo collegamento diretto al PC (questo deve sempre funzionare anche se ci sono attive le altrte possibilità)
; usb
; bluetooth ?? (forse meglio di no, vediamo, la porta seriale virtuale creata non ha informazioni VID e PID e non viene riconosciuta dal OpenFiireApp che andrebbe modificato)

; VARIABILI DA METTERE NEL COMMON

; indica se il codice è per il dispositivo trasmittente o ricevente
; DEVICE_TX_GUN_MICRO
; DEVICE_RX_USB_DONGLE

; indica che tipo di comunicazione attivare e/o utilizzare
; ENABLE_USB_OPENFIRE ???
; ENABLE_ESP_NOW_TO_DONGLE
; ENABLE_WIFI_TO_DONGLE
; ENABLE_BLUETOOTH_TO_PC
; ENABLE_BLUETOOTH_TO_DONGLE
; ENABLE_NRF_24L01PLUS





;;;;;;;;lib_extra_dirs = ~\Documents\Arduino\libraries
;build_dir = ..\.pio_build_dir   //defoult .pio (.. che è ${workspace_dir}) del progetto che sarebbe ${workspace_dir}/build
;libdeps_dir =                   //default .pio (.. che è ${workspace_dir}) del progetto che sarebbe ${workspace_dir}/libdeps
;  ${workspace_dir} -- > “<Project>/.pio” default è .pio
; ${project source}/include

; core_dir
;The default value is the user’s home directory:
;Unix ~/.platformio
;Windows %HOMEPATH%\.platformio


;workspace_dir = ${core_dir}/OpenFire_ESP32_S3/.pio
;;;;;;;;;;;;;;;;;;;;;*****;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;workspace_dir = ${platformio.core_dir}/workspace_dir/${platformio.name}
;build_dir = ${core_dir}/build



[env]

[esp32]
platform_packages = 
	;;;;;;;;;;;;;;;framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#3.1.0 ;#master
	;framework-arduinoespressif32-libs @ https://github.com/espressif/arduino-esp32/releases/download/3.1.0/esp32-3.1.0.zip
	;framework-arduinoespressif32-libs @ https://github.com/espressif/esp32-arduino-lib-builder/tree/master/components/arduino_tinyusb
	;framework-arduinoespressif32-libs @ https://github.com/espressif/esp32-arduino-lib-builder
	;framework-arduinoespressif32 @ https://github.com/espressif/arduino-esp32.git#2.0.14
	;;;;;;;;;;;;;;;;;;;framework-espidf @ https://github.com/espressif/esp-idf#v5.4
	;espressif/toolchain-xtensa-esp32s3 @ 12.2.0+20230208
	;espressif/xtensa-esp-elf-gdb @ 12.1_20231023
	;espressif/toolchain-xtensa-riscv32-esp @ 8.4.0+2021r2-patch5 

[rp2040]
platform_packages = 
	framework-arduinopico @ https://github.com/earlephilhower/arduino-pico.git#4.5.1 ;#master

[common]
lib_deps = 
	adafruit/Adafruit SSD1306@^2.5.13
	adafruit/Adafruit NeoPixel@^1.12.5
	adafruit/Adafruit GFX Library@^1.12.0
	adafruit/Adafruit BusIO@^1.17.0
build_flags = 
	-D GUN
	;-D DONGLE
	-D DEVICE_VID=0xF143
	-D DEVICE_PID=0x1998
	-D USES_DISPLAY
	-D PLAYER_NUMBER=1
	-D USES_SOLENOID
	-D USES_RUMBLE
	;-D USES_SWITCHES
	-D MAMEHOOKER
	-D USES_ANALOG
	-D CUSTOM_NEOPIXEL
	;-D FOURPIN_LED
	;-D DUAL_CORE=1
	-D USES_TEMP
	;-D USE_TINYUSB
	-D SAMCO_EEPROM_ENABLE
	-std=gnu++17
	-std=gnu17
	;-std=gnu++2b
	;-std=gnu2x
build_unflags = 
	-std=gnu++11
	-std=gnu11

[env:ESP32_S3_WROOM1_DevKitC_1_N16R8]
;platform = espressif32
platform = https://github.com/pioarduino/platform-espressif32/releases/download/stable/platform-espressif32.zip ; stable 3.1.3
;;;;;;;;;;;platform = https://github.com/pioarduino/platform-espressif32.git#develop
;;;;;;;platform = https://github.com/pioarduino/platform-espressif32.git#3.1.3 ; stable
;;;;;;;;;;;;;;;;;;;;platform = https://github.com/pioarduino/platform-espressif32.git#develop ;develop
;platform = espressif32@5.1.0
;;;;;;;;;;;;platform = https://github.com/platformio/platform-espressif32.git@6.9.0
board = esp32-s3-devkitc-1
	;esp32-s3-devkitc-1
	;esp32-pico-devkitm-2
	;esp-wrover-kit
	;esp32dev
	;ESP32_S3_WROOM1_DevKitC_1_N16R8
	;esp32-s3-devkitc-1
framework = arduino
	;;;;;;;;;;;;;;;;;;;;espidf
monitor_speed = 9600 ;115200
lib_deps = 
	;https://github.com/adafruit/Adafruit_TinyUSB_Arduino.git#3.4.2
	;adafruit/Adafruit TinyUSB Library @ 2.4.1
	;adafruit/Adafruit TinyUSB Library @ 3.3.4
	Adafruit TinyUSB Library@^3.4.4
	;powerbroker2/SerialTransfer@^3.1.4
	;;;;;;;;;;;;;;;;;;;;;;;;;;nRF24/RF24@^1.4.11
	;${platformio.lib_dir}/Bluetooth_OpenFIRE/ESP32
	${common.lib_deps}
build_unflags = 
	-DARDUINO_USB_MODE=1
	${common.build_unflags}
build_flags = 
	-D ARDUINO_ESP32_S3_WROOM1_DevKitC_1_N16R8
	;-D PIN_NEOPIXEL = 10
	-D OPENFIRE_WIRELESS_ENABLE
	-D OPENFIRE_WIRELESS_DEVICE_ESPNOW
	-D DUAL_CORE
	;-D OPENFIRE_WIRELESS_DEVICE_BLE
	;-D OPENFIRE_WIRELESS_DEVICE_NRF_24L01PLUS
	;;;;;;;;;;;;;;;;;;;;;;;;-D PIO_FRAMEWORK_ARDUINO_ENABLE_BLUETOOTH
	;;;;;;;;;;;;;;;;;;;;;;;;-D ENABLE_BLUETOOTH_OPENFIRE
	;-D ENABLE_CLASSIC=1
	;-D ENABLE_BLE=1
	;-D ARDUINO_ARCH_ESP32
	-D USE_TINYUSB
	;-D CONFIG_TINYUSB_ENABLED
	-D ARDUINO_USB_MODE=0
	-D ARDUINO_USB_CDC_ON_BOOT=1
	;'-D CFG_TUSB_CONFIG_FILE="E:\PROGETTI\git_clone\Adafruit_TinyUSB_Arduino\src\arduino\ports\esp32/tusb_config_esp32.h"'
	;-D CFG_TUSB_CONFIG_FILE="../../arduino_tinyusb/include/tusb_config.h"
	;-D PIO_FRAMEWORK_ARDUINO_ENABLE_CDC
	;-D ARDUINO_USB_MODE = USB-OTG ;(TinyUSB)
	;-D USE_TINYUSB =1 
	;-D ARDUINO_ARCH_ESP32
	;-D CFG_TUSB_MCU = OPT_MCU_ESP32S3
	;-D ADAFRUIT_TINYUSB_H_ ; per prove
	;-D CONFIG_TINYUSB_ENABLED
	;-D CONFIG_BT_ENABLED
	;-D CONFIG_BLUEDROID_ENABLED
	;-D PIO_FRAMEWORK_ARDUINO_ENABLE_BLUETOOTH
	;;;;;;;;;;;;;;;;;;;;-D OPENFIRE_BLE_ENABLE ; per il dispositivo HID usa il BLE .. se non attivato usa il bt classic
	;;;;;;;;;;;;;;;;;;;;-D RFCOMM_ENABLE ; abilita la porta seriale su bluetooth classic
	;;;;;;;;;;;;;;-D DUAL_CORE
	;;;;;;;;;;;;;;-D DUAL_CORE_ESP32
	;-D DUAL_CORE_BT
	;-D FORZA_BT ; forza l'uso del bluetooth .. la coonessione usb non viene utilizzata anche se connesso
	;-I "${platformio.lib_dir}/OpenFIRE_Wireless/ESP32"
	${common.build_flags}
;build_unflags = ${common.build_unflags}
platform_packages = ${esp32.platform_packages}
;lib_extra_dirs = lib/OpenFIRE_Wireless/ESP32/
;build_src_filter = +<*> +<${platformio.lib_dir}/Bluetooth_OpenFIRE/ESP32/*>
lib_ldf_mode = chain
lib_compat_mode = strict




[env:rpipicow]
platform = https://github.com/maxgerhardt/platform-raspberrypi.git#develop
framework = arduino
board = rpipicow
board_build.core = earlephilhower
board_build.filesystem_size = 0.5m
monitor_speed = 9600
monitor_port = COM3
upload_protocol = picotool
build_type = release
lib_deps = 
	;;;;;;;;;;;;;;;;nRF24/RF24@^1.4.11
	${common.lib_deps}
;lib_ignore =
;    OpenFIRE_Wireless/ESP32
;build_src_filter = -<${platformio.lib_dir}/OpenFIRE_Wireless/ESP32/>
;build_src_filter = 
;	build_src_filter
;	;+<**/*.c>
;  	;+<**/*.cpp>
;	+<*>
;	-<.git/> 
;	-<.svn/>
;	-<../lib/OpenFIRE_Wireless/ESP32/*>
lib_ignore = OpenFIRE_Wireless
;src_Filter = -<../lib/OpenFIRE_Wireless/ESP32/*> deprecato
;build_src_filter = +<*> +<${platformio.lib_dir}/Bluetooth_OpenFIRE/ESP32/*>
;src_filter = -<lib/OpenFIRE_Wireless/ESP32/> ;+<directory_inclusa/>
build_unflags = 
	-DARDUINO_USB_MODE=1
	${common.build_unflags}
build_flags = 
	-D ARDUINO_RASPBERRY_PI_PICO_W
	-D USE_TINYUSB
	-D ARDUINO_USB_MODE=0
	-D ARDUINO_USB_CDC_ON_BOOT=1
	-D PIO_FRAMEWORK_ARDUINO_ENABLE_BLUETOOTH
	-D DUAL_CORE
	;-I "${platformio.lib_dir}/OpenFIRE_Wireless/RP2040/"
	${common.build_flags}
platform_packages = ${rp2040.platform_packages}
lib_ldf_mode = chain
lib_compat_mode = strict

[env:rpipico]
platform = https://github.com/maxgerhardt/platform-raspberrypi.git#develop
framework = arduino
board = rpipico
board_build.core = earlephilhower
board_build.filesystem_size = 0.5m
monitor_speed = 9600
monitor_port = COM3 ;COM135
;monitor_speed = 115200
upload_protocol = picotool
build_type = release
lib_deps = ${common.lib_deps}
build_flags = 
	-D USE_TINYUSB
	-D DUAL_CORE=1
	;-D PIO_FRAMEWORK_ARDUINO_ENABLE_EXCEPTIONS
	;-fstack-protector
	;-D PIO_FRAMEWORK_ARDUINO_ENABLE_RTTI
	${common.build_flags}
platform_packages = ${rp2040.platform_packages}
;board_build.mcu = 
;	rp2040
;	usbstack=tinyusb
;	opt=Optimize3
lib_ldf_mode = chain
lib_compat_mode = strict
